"""Functions for loading/saving DAGs."""
from typing import no_type_check, Optional
import numpy as np
import baynet
from baynet.utils import DAG_pb2
from baynet.parameters import ConditionalProbabilityDistribution, ConditionalProbabilityTable


@no_type_check
def dag_to_buf(dag: 'baynet.DAG') -> bytes:
    """Dump DAG object to bytes using protobuf."""
    # pylint: disable=no-member
    dag_buf = DAG_pb2.DAG()
    for vertex in dag.vs:
        node = DAG_pb2.Node()
        node.name = vertex['name']
        node.parents.extend([str(v['name']) for v in vertex.neighbors(mode="in")])
        if vertex['CPD'] is not None:
            if isinstance(vertex['CPD'], ConditionalProbabilityTable):
                node.variable_type = DAG_pb2.NodeType.DISCRETE
                node.levels.extend(vertex['levels'])
            elif isinstance(vertex['CPD'], ConditionalProbabilityDistribution):
                node.variable_type = DAG_pb2.NodeType.CONTINUOUS
            node.cpd_array.shape.extend(vertex['CPD'].array.shape)
            node.cpd_array.flat_array = vertex['CPD'].array.tobytes()
        dag_buf.nodes.append(node)
    return dag_buf.SerializeToString()


@no_type_check
def buf_to_dag(dag_buf: bytes, dag: Optional['baynet.DAG'] = None) -> 'baynet.DAG':
    """Convert protobuf generated bytes into DAG object."""
    # pylint: disable=no-member
    dag_from_buf = DAG_pb2.DAG.FromString(dag_buf)
    if dag is None:
        dag = baynet.DAG()
    dag.add_vertices([node.name for node in dag_from_buf.nodes])
    for buf_node in dag_from_buf.nodes:
        edges = [(source, buf_node.name) for source in buf_node.parents]
        dag.add_edges(edges)
        node = dag.get_node(buf_node.name)
        if buf_node.variable_type == DAG_pb2.NodeType.DISCRETE:
            node['levels'] = list(buf_node.levels)
            cpd = ConditionalProbabilityTable()
            cpd.name = buf_node.name
            cpd.levels = list(buf_node.levels)
            cpd.array = buf_to_array(buf_node.cpd_array)
            cpd.rescale_probabilities()
        elif buf_node.variable_type == DAG_pb2.NodeType.CONTINUOUS:
            cpd = ConditionalProbabilityDistribution()
            cpd.name = buf_node.name
            cpd.array = buf_to_array(buf_node.cpd_array)
        cpd.parents = list(buf_node.parents)
        node['CPD'] = cpd
    return dag


@no_type_check
def buf_to_array(array_buf: DAG_pb2.Array) -> np.ndarray:
    """Convert protobuf array object into numpy ndarray."""
    # pylint: disable=no-member
    arr = np.frombuffer(array_buf.flat_array)
    if arr.size > 0:
        arr = arr.reshape(list(array_buf.shape))
    return arr
